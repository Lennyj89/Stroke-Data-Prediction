strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi + smoking_status, data = strokeData_nn, size = 1)
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#obtain the predicted values
predStrokeNN <- data.frame(gender = strokeData_nn$gender, age.mm = strokeData_nn$age.mm, hypertension = strokeData_nn$hypertension, heart_disease = strokeData_nn$heart_disease, ever_married = strokeData_nn$ever_married, work_type = strokeData_nn$work_type, Residence_type = strokeData_nn$Residence_type, avg_glucose_level.mm = strokeData_nn$avg_glucose_level.mm, bmi.mm = strokeData_nn$bmi.mm, smoking_status = strokeData_nn$smoking_status)
predNn01 <- predict(object = nn01, newdata = predStrokeNN, type = "class")
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi.mm + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#obtain the predicted values
predStrokeNN <- data.frame(gender = strokeData_nn$gender, age.mm = strokeData_nn$age.mm, hypertension = strokeData_nn$hypertension, heart_disease = strokeData_nn$heart_disease, ever_married = strokeData_nn$ever_married, work_type = strokeData_nn$work_type, Residence_type = strokeData_nn$Residence_type, avg_glucose_level.mm = strokeData_nn$avg_glucose_level.mm, bmi.mm = strokeData_nn$bmi.mm, smoking_status = strokeData_nn$smoking_status)
predNn01 <- predict(object = nn01, newdata = predStrokeNN, type = "class")
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi.mm + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#obtain the predicted values
predStrokeNN <- data.frame(gender = strokeData_nn$gender, age.mm = strokeData_nn$age.mm, hypertension = strokeData_nn$hypertension, heart_disease = strokeData_nn$heart_disease, ever_married = strokeData_nn$ever_married, work_type = strokeData_nn$work_type, Residence_type = strokeData_nn$Residence_type, avg_glucose_level.mm = strokeData_nn$avg_glucose_level.mm, bmi.mm = strokeData_nn$bmi.mm, smoking_status = strokeData_nn$smoking_status)
predNn01 <- predict(object = nn01, newdata = predStrokeNN, type = "class")
#Evaluate the training model
trainTableNN <- table(strokeData_nn$stroke, predNn01)
row.names(trainTableNN) <- c("Actual: 0", "Actual: 1")
colnames(trainTableNN) <- c("Predicted: 0", "Predicted: 1")
trainTableNN <- addmargins(A = trainTableNN, FUN = list(Total = sum), quiet = TRUE); trainTableNN
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi.mm + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#obtain the predicted values
predStrokeNN <- data.frame(gender = strokeData_nn$gender, age.mm = strokeData_nn$age.mm, hypertension = strokeData_nn$hypertension, heart_disease = strokeData_nn$heart_disease, ever_married = strokeData_nn$ever_married, work_type = strokeData_nn$work_type, Residence_type = strokeData_nn$Residence_type, avg_glucose_level.mm = strokeData_nn$avg_glucose_level.mm, bmi.mm = strokeData_nn$bmi.mm, smoking_status = strokeData_nn$smoking_status)
predNn01 <- predict(object = nn01, newdata = predStrokeNN, type = "class")
#Evaluate the training model
trainTableNN <- table(strokeData_nn$stroke, predNn01)
row.names(trainTableNN) <- c("Actual: 0", "Actual: 1")
colnames(trainTableNN) <- c("Predicted: 0", "Predicted: 1")
trainTableNN <- addmargins(A = trainTableNN, FUN = list(Total = sum), quiet = TRUE); trainTableNN
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$gender <- factor(strokeData_nn$gender)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$ever_married <- factor(strokeData_nn$ever_married)
strokeData_nn$work_type <- factor(strokeData_nn$work_type)
strokeData_nn$Residence_type <- factor(strokeData_nn$Residence_type)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData_nn$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ gender + age.mm + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level.mm + bmi.mm + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#obtain the predicted values
predStrokeNN <- data.frame(gender = strokeData_nn$gender, age.mm = strokeData_nn$age.mm, hypertension = strokeData_nn$hypertension, heart_disease = strokeData_nn$heart_disease, ever_married = strokeData_nn$ever_married, work_type = strokeData_nn$work_type, Residence_type = strokeData_nn$Residence_type, avg_glucose_level.mm = strokeData_nn$avg_glucose_level.mm, bmi.mm = strokeData_nn$bmi.mm, smoking_status = strokeData_nn$smoking_status)
predNn01 <- predict(object = nn01, newdata = predStrokeNN, type = "class")
#Evaluate the training model
trainTableNN <- table(strokeData_nn$stroke, predNn01)
row.names(trainTableNN) <- c("Actual: 0", "Actual: 1")
colnames(trainTableNN) <- c("Predicted: 0", "Predicted: 1")
trainTableNN <- addmargins(A = trainTableNN, FUN = list(Total = sum), quiet = TRUE); trainTableNN
#Test the model on the test data
strokeData_nnTest <- strokeData_test
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nnTest$gender <- factor(strokeData_nnTest$gender)
strokeData_nnTest$hypertension <- factor(strokeData_nnTest$hypertension)
strokeData_nnTest$heart_disease <- factor(strokeData_nnTest$heart_disease)
strokeData_nnTest$ever_married <- factor(strokeData_nnTest$ever_married)
strokeData_nnTest$work_type <- factor(strokeData_nnTest$work_type)
strokeData_nnTest$Residence_type <- factor(strokeData_nnTest$Residence_type)
strokeData_nnTest$smoking_status <- factor(strokeData_nnTest$smoking_status)
strokeData_nnTest$stroke <- factor(strokeData_nnTest$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nnTest$age.mm <- (strokeData_nnTest$age - min(strokeData_nnTest$age)) / (max(strokeData_nnTest$age) - min(strokeData_nnTest$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nnTest$avg_glucose_level - min(strokeData_nnTest$avg_glucose_level)) / (max(strokeData_nnTest$avg_glucose_level) - min(strokeData_nnTest$avg_glucose_level))
#Test the model on the test data
strokeData_nnTest <- strokeData_test
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nnTest$gender <- factor(strokeData_nnTest$gender)
strokeData_nnTest$hypertension <- factor(strokeData_nnTest$hypertension)
strokeData_nnTest$heart_disease <- factor(strokeData_nnTest$heart_disease)
strokeData_nnTest$ever_married <- factor(strokeData_nnTest$ever_married)
strokeData_nnTest$work_type <- factor(strokeData_nnTest$work_type)
strokeData_nnTest$Residence_type <- factor(strokeData_nnTest$Residence_type)
strokeData_nnTest$smoking_status <- factor(strokeData_nnTest$smoking_status)
strokeData_nnTest$stroke <- factor(strokeData_nnTest$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nnTest$age.mm <- (strokeData_nnTest$age - min(strokeData_nnTest$age)) / (max(strokeData_nnTest$age) - min(strokeData_nnTest$age))
strokeData_nnTest$avg_glucose_level.mm <- (strokeData_nnTest$avg_glucose_level - min(strokeData_nnTest$avg_glucose_level)) / (max(strokeData_nnTest$avg_glucose_level) - min(strokeData_nnTest$avg_glucose_level))
strokeData_nnTest$bmi.mm <- (strokeData_nnTest$bmi - min(strokeData_nnTest$bmi)) / (max(strokeData_nnTest$bmi) - min(strokeData_nnTest$bmi))
#obtain the predicted values
predStrokeNNtest <- data.frame(gender = strokeData_nnTest$gender, age.mm = strokeData_nnTest$age.mm, hypertension = strokeData_nnTest$hypertension, heart_disease = strokeData_nnTest$heart_disease, ever_married = strokeData_nnTest$ever_married, work_type = strokeData_nnTest$work_type, Residence_type = strokeData_nnTest$Residence_type, avg_glucose_level.mm = strokeData_nnTest$avg_glucose_level.mm, bmi.mm = strokeData_nnTest$bmi.mm, smoking_status = strokeData_nnTest$smoking_status)
predNn01test <- predict(object = nn01, newdata = predStrokeNNtest, type = "class")
#Test the model on the test data
strokeData_nnTest <- strokeData_test
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nnTest$gender <- factor(strokeData_nnTest$gender)
strokeData_nnTest$hypertension <- factor(strokeData_nnTest$hypertension)
strokeData_nnTest$heart_disease <- factor(strokeData_nnTest$heart_disease)
strokeData_nnTest$ever_married <- factor(strokeData_nnTest$ever_married)
strokeData_nnTest$work_type <- factor(strokeData_nnTest$work_type)
strokeData_nnTest$Residence_type <- factor(strokeData_nnTest$Residence_type)
strokeData_nnTest$smoking_status <- factor(strokeData_nnTest$smoking_status)
strokeData_nnTest$stroke <- factor(strokeData_nnTest$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nnTest$age.mm <- (strokeData_nnTest$age - min(strokeData_nnTest$age)) / (max(strokeData_nnTest$age) - min(strokeData_nnTest$age))
strokeData_nnTest$avg_glucose_level.mm <- (strokeData_nnTest$avg_glucose_level - min(strokeData_nnTest$avg_glucose_level)) / (max(strokeData_nnTest$avg_glucose_level) - min(strokeData_nnTest$avg_glucose_level))
strokeData_nnTest$bmi.mm <- (strokeData_nnTest$bmi - min(strokeData_nnTest$bmi)) / (max(strokeData_nnTest$bmi) - min(strokeData_nnTest$bmi))
#obtain the predicted values
predStrokeNNtest <- data.frame(gender = strokeData_nnTest$gender, age.mm = strokeData_nnTest$age.mm, hypertension = strokeData_nnTest$hypertension, heart_disease = strokeData_nnTest$heart_disease, ever_married = strokeData_nnTest$ever_married, work_type = strokeData_nnTest$work_type, Residence_type = strokeData_nnTest$Residence_type, avg_glucose_level.mm = strokeData_nnTest$avg_glucose_level.mm, bmi.mm = strokeData_nnTest$bmi.mm, smoking_status = strokeData_nnTest$smoking_status)
predNn01test <- predict(object = nn01, newdata = predStrokeNNtest, type = "class")
#Evaluate the training model
testTableNN <- table(strokeData_nnTest$stroke, predNn01test)
row.names(testTableNN) <- c("Actual: 0", "Actual: 1")
colnames(testTableNN) <- c("Predicted: 0", "Predicted: 1")
testTableNN <- addmargins(A = testTableNN, FUN = list(Total = sum), quiet = TRUE); testTableNN
#Test the model on the test data
strokeData_nnTest <- strokeData_test
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nnTest$gender <- factor(strokeData_nnTest$gender)
strokeData_nnTest$hypertension <- factor(strokeData_nnTest$hypertension)
strokeData_nnTest$heart_disease <- factor(strokeData_nnTest$heart_disease)
strokeData_nnTest$ever_married <- factor(strokeData_nnTest$ever_married)
strokeData_nnTest$work_type <- factor(strokeData_nnTest$work_type)
strokeData_nnTest$Residence_type <- factor(strokeData_nnTest$Residence_type)
strokeData_nnTest$smoking_status <- factor(strokeData_nnTest$smoking_status)
strokeData_nnTest$stroke <- factor(strokeData_nnTest$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nnTest$age.mm <- (strokeData_nnTest$age - min(strokeData_nnTest$age)) / (max(strokeData_nnTest$age) - min(strokeData_nnTest$age))
strokeData_nnTest$avg_glucose_level.mm <- (strokeData_nnTest$avg_glucose_level - min(strokeData_nnTest$avg_glucose_level)) / (max(strokeData_nnTest$avg_glucose_level) - min(strokeData_nnTest$avg_glucose_level))
strokeData_nnTest$bmi.mm <- (strokeData_nnTest$bmi - min(strokeData_nnTest$bmi)) / (max(strokeData_nnTest$bmi) - min(strokeData_nnTest$bmi))
#obtain the predicted values
predStrokeNNtest <- data.frame(gender = strokeData_nnTest$gender, age.mm = strokeData_nnTest$age.mm, hypertension = strokeData_nnTest$hypertension, heart_disease = strokeData_nnTest$heart_disease, ever_married = strokeData_nnTest$ever_married, work_type = strokeData_nnTest$work_type, Residence_type = strokeData_nnTest$Residence_type, avg_glucose_level.mm = strokeData_nnTest$avg_glucose_level.mm, bmi.mm = strokeData_nnTest$bmi.mm, smoking_status = strokeData_nnTest$smoking_status)
predNn01test <- predict(object = nn01, newdata = predStrokeNNtest, type = "class")
#Evaluate the training model
testTableNN <- table(strokeData_nnTest$stroke, predNn01test)
row.names(testTableNN) <- c("Actual: 0", "Actual: 1")
colnames(testTableNN) <- c("Predicted: 0", "Predicted: 1")
testTableNN <- addmargins(A = testTableNN, FUN = list(Total = sum), quiet = TRUE); testTableNN
#LOGISTIC REGRESSION
#create a dataframe to store logistic regression data
strokeData_logReg <- strokeData_train_rebal
#LOGISTIC REGRESSION
#create a dataframe to store logistic regression data
strokeData_logReg <- strokeData_train_rebal
#Run the logistic regression algorithm
logReg01 <- glm(formula = formula = stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level + bmi + smoking_status, data = strokeData_logReg, family = binomial)
#LOGISTIC REGRESSION
#create a dataframe to store logistic regression data
strokeData_logReg <- strokeData_train_rebal
#Run the logistic regression algorithm
logReg01 <- glm(formula = stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level + bmi + smoking_status, data = strokeData_logReg, family = binomial)
#LOGISTIC REGRESSION
#create a dataframe to store logistic regression data
strokeData_logReg <- strokeData_train_rebal
#Run the logistic regression algorithm
logReg01 <- glm(formula = stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level + bmi + smoking_status, data = strokeData_logReg, family = binomial)
summary(logReg01)
#LOGISTIC REGRESSION
#create a dataframe to store logistic regression data
strokeData_logReg <- strokeData_train_rebal
#Run the logistic regression algorithm
logReg01 <- glm(formula = stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level + bmi + smoking_status, data = strokeData_logReg, family = binomial)
summary(logReg01)
#obtain the predicted values
predStrokeLogReg <- data.frame(gender = strokeData_logReg$gender, age = strokeData_logReg$age, hypertension = strokeData_logReg$hypertension, heart_disease = strokeData_logReg$heart_disease, ever_married = strokeData_logReg$ever_married, work_type = strokeData_logReg$work_type, Residence_type = strokeData_logReg$Residence_type, avg_glucose_level = strokeData_logReg$avg_glucose_level, bmi = strokeData_logReg$bmi, smoking_status = strokeData_logReg$smoking_status)
predLogReg01 <- predict(object = logReg01, newdata = predStrokeLogReg, type = "class")
#LOGISTIC REGRESSION for PCA
#create a dataframe to store logistic regression data
strokeData_logReg <- strokeData_train_rebal
#Run the logistic regression algorithm
logReg01 <- glm(formula = stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level + bmi + smoking_status, data = strokeData_logReg, family = binomial)
summary(logReg01)
#Validate the Logisitic regression model
strokeData_logRegTest <- strokeData_test
#Run the logistic regression algorithm
logReg01test <- glm(formula = stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type + Residence_type + avg_glucose_level + bmi + smoking_status, data = strokeData_logRegTest, family = binomial)
summary(logReg01test)
#Decision Trees
#create a dataframe to store decision tree data
strokeData_dt <- strokeData_train_rebal
#change categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, residence_type, smoking_status, )
strokeData_dt$hypertension <- factor(strokeData_dt$hypertension)
strokeData_dt$heart_disease <- factor(strokeData_dt$heart_disease)
strokeData_dt$smoking_status <- factor(strokeData_dt$smoking_status)
#decision tree algorithm
dt01 <- rpart(formula = stroke ~ age + hypertension + heart_disease + avg_glucose_level + bmi + smoking_status, data = strokeData_dt, method = "class")
rpart.plot(dt01, type = 4, extra = 2)
#obtain the predicted values
predStrokeDT <- data.frame(age = strokeData_dt$age, hypertension = strokeData_dt$hypertension, heart_disease = strokeData_dt$heart_disease, avg_glucose_level = strokeData_dt$avg_glucose_level, bmi = strokeData_dt$bmi, smoking_status = strokeData_dt$smoking_status)
predDt01 <- predict(object = dt01, newdata = predStrokeDT, type = "class")
#Evaluate the training model
trainTableDT <- table(strokeData_dt$stroke, predDt01)
row.names(trainTableDT) <- c("Actual: 0", "Actual: 1")
colnames(trainTableDT) <- c("Predicted: 0", "Predicted: 1")
trainTableDT <- addmargins(A = trainTableDT, FUN = list(Total = sum), quiet = TRUE); trainTableDT
#Test the model on the test data
strokeData_dtTest <- strokeData_test
#change categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, residence_type, smoking_status, )
strokeData_dtTest$hypertension <- factor(strokeData_dtTest$hypertension)
strokeData_dtTest$heart_disease <- factor(strokeData_dtTest$heart_disease)
strokeData_dtTest$smoking_status <- factor(strokeData_dtTest$smoking_status)
#subset the predictors
predStrokeDTtest <- data.frame(age = strokeData_dtTest$age, hypertension = strokeData_dtTest$hypertension, heart_disease = strokeData_dtTest$heart_disease, avg_glucose_level = strokeData_dtTest$avg_glucose_level, bmi = strokeData_dtTest$bmi, smoking_status = strokeData_dtTest$smoking_status)
#Run the decision tree model on the test data
predDt01test <- predict(object = dt01, newdata = predStrokeDTtest, type = "class")
#Evaluate the training model on TEST data
testTableDT <- table(strokeData_dtTest$stroke, predDt01test)
row.names(testTableDT) <- c("Actual: 0", "Actual: 1")
colnames(testTableDT) <- c("Predicted: 0", "Predicted: 1")
testTableDT <- addmargins(A = testTableDT, FUN = list(Total = sum), quiet = TRUE); testTableDT
#NEURAL NETWORKS
#create a dataframe to store neural network data
strokeData_nn <- strokeData_train_rebal
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nn$hypertension <- factor(strokeData_nn$hypertension)
strokeData_nn$heart_disease <- factor(strokeData_nn$heart_disease)
strokeData_nn$smoking_status <- factor(strokeData_nn$smoking_status)
strokeData_nn$stroke <- factor(strokeData_nn$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nn$age.mm <- (strokeData_nn$age - min(strokeData$age)) / (max(strokeData_nn$age) - min(strokeData_nn$age))
strokeData_nn$avg_glucose_level.mm <- (strokeData_nn$avg_glucose_level - min(strokeData_nn$avg_glucose_level)) / (max(strokeData_nn$avg_glucose_level) - min(strokeData_nn$avg_glucose_level))
strokeData_nn$bmi.mm <- (strokeData_nn$bmi - min(strokeData$bmi)) / (max(strokeData_nn$bmi) - min(strokeData_nn$bmi))
#Run the neural network algorithm
nn01 <- nnet(stroke ~ age.mm + hypertension + heart_disease + avg_glucose_level.mm + bmi.mm + smoking_status, data = strokeData_nn, size = 1)
plotnet(nn01)
nn01$wts
#obtain the predicted values
predStrokeNN <- data.frame(age.mm = strokeData_nn$age.mm, hypertension = strokeData_nn$hypertension, heart_disease = strokeData_nn$heart_disease, avg_glucose_level.mm = strokeData_nn$avg_glucose_level.mm, bmi.mm = strokeData_nn$bmi.mm, smoking_status = strokeData_nn$smoking_status)
predNn01 <- predict(object = nn01, newdata = predStrokeNN, type = "class")
#Evaluate the training model
trainTableNN <- table(strokeData_nn$stroke, predNn01)
row.names(trainTableNN) <- c("Actual: 0", "Actual: 1")
colnames(trainTableNN) <- c("Predicted: 0", "Predicted: 1")
trainTableNN <- addmargins(A = trainTableNN, FUN = list(Total = sum), quiet = TRUE); trainTableNN
#Test the model on the test data
strokeData_nnTest <- strokeData_test
#Convert binary and categorical variables to factors (gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke)
strokeData_nnTest$hypertension <- factor(strokeData_nnTest$hypertension)
strokeData_nnTest$heart_disease <- factor(strokeData_nnTest$heart_disease)
strokeData_nnTest$smoking_status <- factor(strokeData_nnTest$smoking_status)
strokeData_nnTest$stroke <- factor(strokeData_nnTest$stroke)
#Perform min-max standardization on numeric variables (age, avg_glucose_level, bmi)
strokeData_nnTest$age.mm <- (strokeData_nnTest$age - min(strokeData_nnTest$age)) / (max(strokeData_nnTest$age) - min(strokeData_nnTest$age))
strokeData_nnTest$avg_glucose_level.mm <- (strokeData_nnTest$avg_glucose_level - min(strokeData_nnTest$avg_glucose_level)) / (max(strokeData_nnTest$avg_glucose_level) - min(strokeData_nnTest$avg_glucose_level))
strokeData_nnTest$bmi.mm <- (strokeData_nnTest$bmi - min(strokeData_nnTest$bmi)) / (max(strokeData_nnTest$bmi) - min(strokeData_nnTest$bmi))
#obtain the predicted values
predStrokeNNtest <- data.frame(age.mm = strokeData_nnTest$age.mm, hypertension = strokeData_nnTest$hypertension, heart_disease = strokeData_nnTest$heart_disease, avg_glucose_level.mm = strokeData_nnTest$avg_glucose_level.mm, bmi.mm = strokeData_nnTest$bmi.mm, smoking_status = strokeData_nnTest$smoking_status)
predNn01test <- predict(object = nn01, newdata = predStrokeNNtest, type = "class")
#Evaluate the training model
testTableNN <- table(strokeData_nnTest$stroke, predNn01test)
row.names(testTableNN) <- c("Actual: 0", "Actual: 1")
colnames(testTableNN) <- c("Predicted: 0", "Predicted: 1")
testTableNN <- addmargins(A = testTableNN, FUN = list(Total = sum), quiet = TRUE); testTableNN
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
library(ggplot2)
library(dplyr)
library(psych)
library(corrplot)
library(rpart)
library(rpart.plot)
library(nnet)
library(NeuralNetTools)
library(arules)
library(ggplot2)
library(dplyr)
library(psych)
library(corrplot)
library(rpart)
library(rpart.plot)
library(nnet)
library(NeuralNetTools)
library(arules)
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#determine the rules where stroke in antecedent
all.rules.ant.df <- as(as(attr(all.rules, "lhs"), "transactions"), "data.frame")
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#determine the rules where stroke in antecedent
all.rules.ant.df <- as(as(attr(all.rules, "lhs"), "transactions"), "data.frame")
t1 <- rules.dataframe$items == "{stroke=1}"
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#determine the rules where stroke in antecedent
all.rules.ant.df <- as(as(attr(all.rules, "lhs"), "transactions"), "data.frame")
t1 <- all.rules.ant.df$items == "{stroke=1}"
t2 <- all.rules.ant.df$items == "{stroke=0}"
non.stroke.ant <- abs(t1 + t2 - 1)
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#determine the rules where stroke in antecedent
all.rules.ant.df <- as(as(attr(all.rules, "lhs"), "transactions"), "data.frame")
t1 <- all.rules.ant.df$items == "{stroke=1}"
t2 <- all.rules.ant.df$items == "{stroke=0}"
non.stroke.ant <- abs(t1 + t2 - 1)
good.rules <- all.rules[non.stroke.ant == 1]
inspect(head(good.rules, by = "lift", n = 10))
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#determine the rules where stroke in antecedent
all.rules.ant.df <- as(as(attr(all.rules, "lhs"), "transactions"), "data.frame")
t1 <- all.rules.ant.df$items == "{stroke=1}"
t2 <- all.rules.ant.df$items == "{stroke=0}"
non.stroke.ant <- abs(t1 + t2 - 1)
good.rules <- all.rules[non.stroke.ant == 1]
inspect(head(good.rules, by = "lift", n = 25))
View(all.rules.ant.df)
#ASSOCIATION RULES
#create a dataframe to store association rules data
strokeData_ar <- strokeData_train_rebal
#subset the data to only use variables we want rules for
min.strokeData_ar <- subset(strokeData_ar, select = c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi", "smoking_status", "stroke"))
#Convert binary and categorical variables to factors (hypertension, heart_disease, smoking_status, stroke)
min.strokeData_ar$hypertension <- factor(min.strokeData_ar$hypertension)
min.strokeData_ar$heart_disease <- factor(min.strokeData_ar$heart_disease)
min.strokeData_ar$smoking_status <- factor(min.strokeData_ar$smoking_status)
min.strokeData_ar$stroke <- factor(min.strokeData_ar$stroke)
#generate the association rules
all.rules <- apriori(data = min.strokeData_ar, parameter = list(supp = 0.01, target = "rules", conf = 0.4, minlen = 2, maxlen = 2))
#view the rules
inspect(head(all.rules, by = "lift", n = 10))
#determine the rules where stroke in antecedent
all.rules.ant.df <- as(as(attr(all.rules, "lhs"), "transactions"), "data.frame")
t1 <- all.rules.ant.df$items == "{stroke=1}"
t2 <- all.rules.ant.df$items == "{stroke=0}"
non.stroke.ant <- abs(t1 + t2 - 1)
good.rules <- all.rules[non.stroke.ant == 1]
inspect(head(good.rules, by = "lift", n = 25))
View(good.rules)
